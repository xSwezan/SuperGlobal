[{"title":"Intro","type":0,"sectionRef":"#","url":"docs/intro","content":"Intro SuperGlobal is designed to make it easier to communicate globally with other servers! SuperGlobal could be useful when making e.g a Global Marketplace System.","keywords":""},{"title":"SuperGlobal","type":0,"sectionRef":"#","url":"api/SuperGlobal","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"SuperGlobal","url":"api/SuperGlobal#functions","content":" "},{"title":"GetStore​","type":1,"pageTitle":"SuperGlobal","url":"api/SuperGlobal#GetStore","content":"&lt;/&gt; SuperGlobal:GetStore(StoreName: string) → Store Returns a Store that you can use to add/remove items from. tip You can find more info about Stores in the Store documentation. Example local FruitStore = SuperGlobal:GetStore(&quot;FruitStore&quot;)  "},{"title":"Store","type":0,"sectionRef":"#","url":"api/Store","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Store","url":"api/Store#types","content":" "},{"title":"ItemData​","type":1,"pageTitle":"Store","url":"api/Store#ItemData","content":"&lt;/&gt; type ItemData = string | number | table   "},{"title":"StoreType​","type":1,"pageTitle":"Store","url":"api/Store#StoreType","content":"&lt;/&gt; interface StoreType { AddItem: ( self: Store, Key: string, Data: ItemData, Expiration: number? ) → nil; RemoveItem: ( self: Store, Key: string ) → nil; GetItem: ( self: Store, Key: string ) → ItemData?; GetItems: ( Count: number?, SortDirection: Enum.SortDirection? ) → {[string]: ItemData}; ItemAdded: RBXScriptSignal; ItemRemoved: RBXScriptSignal; }  "},{"title":"Functions​","type":1,"pageTitle":"Store","url":"api/Store#functions","content":" "},{"title":"AddItem​","type":1,"pageTitle":"Store","url":"api/Store#AddItem","content":"&lt;/&gt; Store:AddItem( Key: string, Data: Types.ItemData, Expiration: number? ) → nil Add an Item into the Store  "},{"title":"RemoveItem​","type":1,"pageTitle":"Store","url":"api/Store#RemoveItem","content":"&lt;/&gt; Store:RemoveItem(Key: string) → nil Remove an Item from the Store  "},{"title":"GetItem​","type":1,"pageTitle":"Store","url":"api/Store#GetItem","content":"&lt;/&gt; Store:GetItem(Key: string) → any? Get an Item from the Store  "},{"title":"GetItems​","type":1,"pageTitle":"Store","url":"api/Store#GetItems","content":"&lt;/&gt; Store:GetItems( Count: number?, SortDirection: Enum.SortDirection? ) → ItemData Get an Amount of items from the Store "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/gettingstarted","content":"","keywords":""},{"title":"Getting Stores​","type":1,"pageTitle":"Getting Started","url":"docs/gettingstarted#getting-stores","content":"SuperGlobal lets you to create/get Stores and store data in them. A Store will let you to Store data and listen for incomming/outgoing data. Stores can be useful when making a Global Marketplace System or a Global Matchmaking System. To get a Store with SuperGlobal you have to use the :GetStore() method. A Store stores Items like this: {[Key] = Data} FruitStore Example​ {-- [Key] = Data [&quot;Apple&quot;] = { Cost = 10, Amount = 5 }, [&quot;Banana&quot;] = { Cost = 5, Amount = 2 } }  Store API More info about Stores are in the Store documentation! Example (Listening to a Store)​ local SuperGlobal = require(PARENT.SuperGlobal) -- Get the Store local Marketplace = SuperGlobal:GetStore(&quot;Marketplace&quot;) -- Listen for when Items get added into the store (global) Marketplace.ItemAdded:Connect(function(Key: string) -- Get the Data for the Item local ItemData = Marketplace:GetItem(Key) print(Key, &quot;was added to the Marketplace with data:&quot;, ItemData) end) -- Listen for when Items get removed from the store (global) Marketplace.ItemRemoved.Connect(function(Key: string) print(Key, &quot;was removed from the Marketplace&quot;) end)  Example (Manipulating Items in a Store)​ local SuperGlobal = require(PARENT.SuperGlobal) -- Get the Store local Marketplace = SuperGlobal:GetStore(&quot;Marketplace&quot;) local Item = { -- Doesn't have to be a table! Name = &quot;Apple&quot;; Amount = 3; Cost = 15; Seller = 116387673; -- UserId for xSwezan } -- Add Item to the Marketplace Marketplace:AddItem(&quot;A_Unique_Key&quot;, Item) task.wait(5) -- Remove the Item from the Marketplace Marketplace:RemoveItem(&quot;A_Unique_Key&quot;)  tip If you want an expiration you can put Expiration: number as the third argument, like this: Marketplace:AddItem(&quot;A_Unique_Key&quot;, Item, 5) Instead of: Marketplace:AddItem(&quot;A_Unique_Key&quot;, Item) task.wait(5) Marketplace:RemoveItem(&quot;A_Unique_Key&quot;)  "}]